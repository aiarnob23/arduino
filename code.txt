//fire detection 
int mq4Pin = A0;
int sensorValue = 0;
int flame_sensor_pin = 4;
int buzzer_pin = 9;
int flame_pin = HIGH;


void setup() {
  pinMode(flame_sensor_pin, INPUT);
  pinMode(buzzer_pin, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  sensorValue = analogRead(mq4Pin);
  flame_pin = digitalRead(flame_sensor_pin);
   if (flame_pin == LOW || sensorValue>700)                              
  {
    Serial.println("FLAME, FLAME, FLAME");    
    digitalWrite(buzzer_pin, HIGH);
  }
  else {
    Serial.println("no flame");                                            
    digitalWrite(buzzer_pin, LOW);
  }
  
  Serial.print("MQ4 Sensor Value: ");
  Serial.println(sensorValue);
  

  delay(500);
}
//-----------------------------------------------//
pir motion

//////////////////////////
int calibrationTime = 30;          
long unsigned int lowIn;           
long unsigned int pause = 10000;  
boolean lockLow = true; 
boolean takeLowTime;    
int pirPin = 6;    
int ledPin = 7;   
long unsigned int motionLedOnTime = 6000; // 1 minute (60000 ms)
long unsigned int lastMotionTime;          // Time when the motion was last detected

void setup() {
   Serial.begin(9600);
   pinMode(pirPin, INPUT);
   pinMode(ledPin, OUTPUT);
   digitalWrite(pirPin, LOW);
   
   Serial.print("calibrating sensor ");     
   for(int i = 0; i < calibrationTime; i++) {
       Serial.print(".");
       delay(500);
   }
   Serial.println(" done");
   Serial.println("SENSOR ACTIVE");
   delay(50);
}

void loop() {
   if(digitalRead(pirPin) == HIGH) {
        digitalWrite(ledPin, HIGH);   
        lastMotionTime = millis();   // Update the time when motion was detected
        if(lockLow) {
          lockLow = false;                      
          Serial.println("---");
          Serial.print("motion detected at ");
          Serial.print(millis()/1000);
          Serial.println(" sec");
          delay(50); 
        }                   
        takeLowTime = true;
   }
   
   if(digitalRead(pirPin) == LOW) {
        if (millis() - lastMotionTime > motionLedOnTime) { // Check if 1 minute has passed since last motion
            digitalWrite(ledPin, LOW);
        }
        
        if(takeLowTime) {
            lowIn = millis();
            takeLowTime = false;
        }
        
        if(!lockLow && millis() - lowIn > pause) {
            lockLow = true;                                    
            Serial.print("motion ended at ");
            Serial.print((millis() - pause)/100);
            Serial.println(" sec");
            delay(50);
        }
   }
}

////////soil test-----------------------------------------------------
const int sensor_pin = A0;  // Declare sensor_pin as a constant globally

void setup()
{
  Serial.begin(9600);  // Initialize serial communication
  pinMode(sensor_pin, INPUT);  // Set sensor_pin as input
}

void loop()
{
  int sensor_data = analogRead(sensor_pin);  // Read sensor data
  Serial.print("Sensor_data: ");
  Serial.print(sensor_data);
  Serial.print("\t | ");
  
  // Determine soil moisture level
  if (sensor_data > 800)
  {
    Serial.println("No moisture, Soil is dry");
  }
  else if (sensor_data >= 600 && sensor_data <= 800)
  {
    Serial.println("Soil is moderately moist");
  }
  else
  {
    Serial.println("Soil is wet");
  }

  delay(100);  // Delay for 100 milliseconds
}
//-----------------------------------water pmp------------//
const int trigPin = 4;  // Trigger pin connected to pin 4
const int echoPin = 5;  // Echo pin connected to pin 5
const int relayPin = 8; // Relay control pin connected to pin 8

void setup() {
  Serial.begin(9600);  // Initialize serial communication at 9600 baud rate
  pinMode(trigPin, OUTPUT);  // Set trigPin as output
  pinMode(echoPin, INPUT);   // Set echoPin as input
  pinMode(relayPin, OUTPUT); // Set relayPin as output
  
  digitalWrite(relayPin, LOW); // Ensure relay is off at the start
}

void loop() {
  // Send a 10-microsecond pulse to trigger the sonar
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the echo time
  long duration = pulseIn(echoPin, HIGH);

  // Calculate the distance in centimeters
  float distance = (duration * 0.0343) / 2;

  // Print the distance to the Serial Monitor for debugging
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Logic: If the distance is less than 10 cm, turn off the relay (motor stops)
  if(distance < 6) {
    digitalWrite(relayPin, HIGH);  // Deactivate relay
    Serial.println("Relay activated (Motor OFF)"); // Debug message
    if(distance<3){
      digitalWrite(relayPin, LOW);
      Serial.println("motor off, successfully filled with water");
    }
  } else {
    digitalWrite(relayPin, LOW);  // Activate relay
    Serial.println("Relay Deactivated (Motor ON)"); // Debug message
  }

  // Add a short delay before the next measurement
  delay(100);  
}

//updated water pump

const int trigPin = 4;  // Trigger pin connected to pin 4
const int echoPin = 5;  // Echo pin connected to pin 5
const int relayPin = 8; // Relay control pin connected to pin 8

void setup() {
  Serial.begin(9600);  // Initialize serial communication at 9600 baud rate
  pinMode(trigPin, OUTPUT);  // Set trigPin as output
  pinMode(echoPin, INPUT);   // Set echoPin as input
  pinMode(relayPin, OUTPUT); // Set relayPin as output
  
  digitalWrite(relayPin, LOW); // Ensure relay is off at the start
}

void loop() {
  // Send a 10-microsecond pulse to trigger the sonar
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the echo time
  long duration = pulseIn(echoPin, HIGH);

  // Calculate the distance in centimeters
  float distance = (duration * 0.0343) / 2;

  // Print the distance to the Serial Monitor for debugging
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Logic: If the distance is less than 10 cm, turn off the relay (motor stops)
  if(distance > 8) {
    digitalWrite(relayPin, LOW);  // Deactivate relay
    Serial.println("Relay Deactivated (Motor On)"); // Debug message

  } else if (distance < 3){
    digitalWrite(relayPin, HIGH);  // Activate relay
    Serial.println("Relay Activated (Motor Off)"); // Debug message
  }

  // Add a short delay before the next measurement
  delay(500);  
}
//--------------ldr-------------------///
const int ldrPin = A2;    // LDR connected to A2
const int ledPin = 9;     // LED connected to D9

// Threshold for turning the LED on/off
const int darkThreshold = 10;     // Threshold for darkness
const int brightThreshold = 50;  // Threshold for brightness

bool isLedOn = false;  // Track LED state

void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(250000);
}

void loop() {
  int ldrValue = analogRead(ldrPin);

  Serial.print("LDR Value: ");
  Serial.println(ldrValue);

  // Logic to turn on LED when dark and keep it on
  if (ldrValue < darkThreshold) {
    if (!isLedOn) {
      digitalWrite(ledPin, HIGH);
      isLedOn = true;
      Serial.println("LED turned ON");
    }
  } 
  // Only turn off LED when it becomes very bright
  else if (ldrValue > brightThreshold) {
    if (isLedOn) {
      digitalWrite(ledPin, LOW);
      isLedOn = false;
      Serial.println("LED turned OFF");
    }
  }

  delay(500);  // Small delay for stability
}
